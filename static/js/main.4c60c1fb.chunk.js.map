{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","components/Statistics/Statistics.js","initialFeedback.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","feedback","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","INITIAL_FEEDBACK","App","state","handleFeedback","nameBtn","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCmBQC,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAAC,EAAD,CAASJ,MAAO,wBAAhB,SACGG,EAAQE,KAAI,SAAAC,GAAQ,OACnB,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAJIA,SCCAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC2BEC,EA1BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,cAAC,EAAD,CAASjB,MAAO,aAAhB,SACGgB,EACC,+BACE,wCAAWH,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcN,QAAS,yBChBlBO,EAAmB,CAAC,OAAQ,UAAW,OC8CrCC,E,4MAxCbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,eAAiB,SAAAC,GACf,EAAKC,SAAL,eAAiBD,EAAU,EAAKF,MAAME,GAAW,K,EAGnDE,mBAAqB,WAAO,IAAD,EACM,EAAKJ,MACpC,OAFyB,EACjBP,KADiB,EACXC,QADW,EACFC,K,EAIzBU,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKP,MAAMP,KAAO,EAAKW,qBAAwB,M,uDAG1D,IAAD,EACwBI,KAAKR,MAA5BP,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,qCACE,cAAC,EAAD,CACEZ,QAASe,EACTd,gBAAiBwB,KAAKP,iBAExB,cAAC,EAAD,CACER,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,KAAKJ,qBACZP,mBAAoBW,KAAKH,2C,GAlCjBI,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4c60c1fb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport Section from '../Section';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <Section title={'Please leave feedback'}>\n      {options.map(feedback => (\n        <button\n          type=\"button\"\n          key={feedback}\n          name={feedback}\n          onClick={() => onLeaveFeedback(feedback)}\n        >\n          {feedback}\n        </button>\n      ))}\n    </Section>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport Section from '../Section';\nimport Notification from './Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <Section title={'Statistics'}>\n      {total ? (\n        <ul>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad:{bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive feedback: {positivePercentage}%</li>\n        </ul>\n      ) : (\n        <Notification message={'No feedback given'} />\n      )}\n    </Section>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","export const INITIAL_FEEDBACK = ['good', 'neutral', 'bad'];\r\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport { INITIAL_FEEDBACK } from './initialFeedback';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = nameBtn => {\n    this.setState({ [nameBtn]: this.state[nameBtn] + 1 });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <FeedbackOptions\n          options={INITIAL_FEEDBACK}\n          onLeaveFeedback={this.handleFeedback}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}