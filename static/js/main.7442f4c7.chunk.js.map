{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","handleFeedback","nameBtn","setState","countTotalFeedback","values","reduce","acc","stat","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCmBEC,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAAC,EAAD,CAASJ,MAAO,wBAAhB,SACGK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAAS,kBAAMP,EAAgBI,IAJjC,SAMGA,GAJIA,SCCAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC2BEC,EA1BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,cAAC,EAAD,CAASnB,MAAO,aAAhB,SACGkB,EACC,+BACE,wCAAWH,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcN,QAAS,yBC+BhBO,E,4MA1CbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,eAAiB,SAAAC,GACf,EAAKC,SAAL,eAAiBD,EAAU,EAAKF,MAAME,GAAW,K,EAGnDE,mBAAqB,WACnB,OAAOpB,OAAOqB,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKC,GAE5C,OADAD,GAAOC,IAEN,I,EAGLC,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKX,MAAMN,KAAO,EAAKU,qBAAwB,M,uDAG1D,IAAD,EACwBQ,KAAKZ,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,qCACE,cAAC,EAAD,CACEd,QAAS8B,KAAKZ,MACdjB,gBAAiB6B,KAAKX,iBAExB,cAAC,EAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOe,KAAKR,qBACZN,mBAAoBc,KAAKH,2C,GApCjBI,aCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7442f4c7.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\nimport Section from '../Section';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <Section title={'Please leave feedback'}>\r\n      {Object.keys(options).map(key => (\r\n        <button\r\n          type=\"button\"\r\n          key={key}\r\n          name={key}\r\n          onClick={() => onLeaveFeedback(key)}\r\n        >\r\n          {key}\r\n        </button>\r\n      ))}\r\n    </Section>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\nimport Section from '../Section';\r\nimport Notification from './Notification';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <Section title={'Statistics'}>\r\n      {total ? (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad:{bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message={'No feedback given'} />\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = nameBtn => {\n    this.setState({ [nameBtn]: this.state[nameBtn] + 1 });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, stat) => {\n      acc += stat;\n      return acc;\n    }, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.handleFeedback}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}